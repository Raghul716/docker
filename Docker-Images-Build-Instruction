An image is a combination of file system and parameters. Images contains the binaries and depedencies.
Image contains the data which is required to run the container.
docker images       ---list out all the images
Each image consists of a series of layers Docker makes use of union file systems to combine these layers into a single image.
docker history <image-name>   ----- to show image layers
How to tag a image
docker tag SOURCE_IMAGE[:TAG] TARGET_IAMGE[:TAG]

HOW TO BUILD IMAGES

Docker file Instructions are used to create the docker images.

FROM: The FROM instructuction initialises a new build stage and sets the Base Image for the subsequent instructions.

FROM <Image_name>:<Image_Tag>

LABEL: Label added to iamge to organize iamges by project, record licensing information.

LABEL com.example.version="0.0.1-beta"

RUN: RUN instruction will execute any commands in a new layer on top of the current image and commit the results.

CMD: CMD instruction should be used to run the software contained by your image, Along with any arguments

CMD ["executable", "param1", "param2"]

EXPOSE: Expose instruction indicates the ports on which a container listens for connections.

EXPOSE <port>

ENV: ENV instruction sets the environment variable to the value.

to make new softwaare easier to run you can use ENV to update the PATH environment variable for the software your container installs.

ADD: ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>.

ADD hom*/mydir/   

VOLUME: Volume instruction should be used to expose any database storage area configuration storage, or files/folders created by your docker container

WORKDIR: WORKDIR instruction sets the working directory for any RUN, CMD, ADD instruction that follow it in the Dockerfile.


####CREATE-CUSTOM-IMAGE####

Docker Image is Build from DockerFile.
Docker Build Syntax:
docker build -t ImageName:TagName dir
-t - is to mention a tag to the image.
Dir - The directory where the Docker File is present.

#############Create Custom Nginx Image and execute it#########################

=========================================================================

# Each instruction in this file generates a new layer that gets pushed to your local image cache.
# The line below states we will base our new image on the latest official Ubuntu
FROM ubuntu:latest

#Identify the maintainer of an image
LABEL version="0.0.1"
LABEL maintainer="raghulyogeshwar716@gmail.com"

#Update the image to the latest packages
RUN apt-get update && apt-get upgrade -y

#Install NGINX to test.
RUN apt-get install nginx -y

#Expose port 80
EXPOSE 80

# Last is the actual command to start up NGINX within our Container
CMD ["nginx", "-g", "daemon off;"]

==================================================================



Now run the below command

docker build -t raghul716/nginx_custom:0.0.1 .














